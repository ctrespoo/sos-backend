// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const inserirCategoriaNoProduto = `-- name: InserirCategoriaNoProduto :batchexec
INSERT INTO "_CategoriaToProduto" ("A", "B")
VALUES ($1, $2)
`

type InserirCategoriaNoProdutoBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type InserirCategoriaNoProdutoParams struct {
	A uuid.UUID
	B uuid.UUID
}

func (q *Queries) InserirCategoriaNoProduto(ctx context.Context, arg []InserirCategoriaNoProdutoParams) *InserirCategoriaNoProdutoBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.A,
			a.B,
		}
		batch.Queue(inserirCategoriaNoProduto, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &InserirCategoriaNoProdutoBatchResults{br, len(arg), false}
}

func (b *InserirCategoriaNoProdutoBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *InserirCategoriaNoProdutoBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const inserirCategoriaProdutoPeloNome = `-- name: InserirCategoriaProdutoPeloNome :batchexec
INSERT INTO "_CategoriaToProduto" ("A", "B")
VALUES (
        (
            SELECT "id"
            FROM categorias
            WHERE 'nome' = $1
        ),
        (
            SELECT "id"
            FROM "produtos"
            WHERE 'id' = $2
        )
    ) ON CONFLICT ("A", "B") DO NOTHING
`

type InserirCategoriaProdutoPeloNomeBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type InserirCategoriaProdutoPeloNomeParams struct {
	Column1 interface{}
	Column2 interface{}
}

func (q *Queries) InserirCategoriaProdutoPeloNome(ctx context.Context, arg []InserirCategoriaProdutoPeloNomeParams) *InserirCategoriaProdutoPeloNomeBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Column1,
			a.Column2,
		}
		batch.Queue(inserirCategoriaProdutoPeloNome, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &InserirCategoriaProdutoPeloNomeBatchResults{br, len(arg), false}
}

func (b *InserirCategoriaProdutoPeloNomeBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *InserirCategoriaProdutoPeloNomeBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const pegarCategoriaPeloNome = `-- name: PegarCategoriaPeloNome :batchmany
SELECT "id"
FROM "categorias"
WHERE "nome" = $1
LIMIT 1
`

type PegarCategoriaPeloNomeBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

func (q *Queries) PegarCategoriaPeloNome(ctx context.Context, nome []string) *PegarCategoriaPeloNomeBatchResults {
	batch := &pgx.Batch{}
	for _, a := range nome {
		vals := []interface{}{
			a,
		}
		batch.Queue(pegarCategoriaPeloNome, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &PegarCategoriaPeloNomeBatchResults{br, len(nome), false}
}

func (b *PegarCategoriaPeloNomeBatchResults) Query(f func(int, []uuid.UUID, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []uuid.UUID
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var id uuid.UUID
				if err := rows.Scan(&id); err != nil {
					return err
				}
				items = append(items, id)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *PegarCategoriaPeloNomeBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
