// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: query.sql

package db

import (
	"context"
)

const criarUsuario = `-- name: CriarUsuario :one
INSERT INTO usuarios (
        nome,
        email,
        telefone,
        ativo
    )
VALUES (
        $1,
        $2,
        $3,
        $4
    )
RETURNING id, email, nome, telefone, role, ativo, created_at, updated_at
`

type CriarUsuarioParams struct {
	Nome     string
	Email    string
	Telefone string
	Ativo    bool
}

func (q *Queries) CriarUsuario(ctx context.Context, arg CriarUsuarioParams) (Usuario, error) {
	row := q.db.QueryRow(ctx, criarUsuario,
		arg.Nome,
		arg.Email,
		arg.Telefone,
		arg.Ativo,
	)
	var i Usuario
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Nome,
		&i.Telefone,
		&i.Role,
		&i.Ativo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const pegarUsuarioEmail = `-- name: PegarUsuarioEmail :one
SELECT id, email, nome, telefone, role, ativo, created_at, updated_at
FROM usuarios
WHERE email = $1
LIMIT 1
`

func (q *Queries) PegarUsuarioEmail(ctx context.Context, email string) (Usuario, error) {
	row := q.db.QueryRow(ctx, pegarUsuarioEmail, email)
	var i Usuario
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Nome,
		&i.Telefone,
		&i.Role,
		&i.Ativo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
